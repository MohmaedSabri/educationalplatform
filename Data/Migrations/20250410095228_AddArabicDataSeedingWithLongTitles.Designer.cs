// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using data;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250410095228_AddArabicDataSeedingWithLongTitles")]
    partial class AddArabicDataSeedingWithLongTitles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("182b54eb-d431-4016-9545-04bb5ee205f9"),
                            RoleId = new Guid("65a67234-cdab-433d-bcf1-60a0e88907cd")
                        },
                        new
                        {
                            UserId = new Guid("e1aa04ca-694f-4efc-b90c-3d9cf54fbe96"),
                            RoleId = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3")
                        },
                        new
                        {
                            UserId = new Guid("d43ae3f5-659a-458a-949f-f56fac95c00c"),
                            RoleId = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3")
                        },
                        new
                        {
                            UserId = new Guid("8482fac0-379d-41fb-b46c-d57b6790a31c"),
                            RoleId = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3")
                        },
                        new
                        {
                            UserId = new Guid("41906696-d1a6-4bf6-8f35-8fe9e3ddb7d2"),
                            RoleId = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3")
                        },
                        new
                        {
                            UserId = new Guid("441baea8-ba1a-40c6-bc9b-27ddcff7dd10"),
                            RoleId = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3")
                        },
                        new
                        {
                            UserId = new Guid("c89a74d7-ade4-4d53-9ad8-d3d7a3d778f1"),
                            RoleId = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3")
                        },
                        new
                        {
                            UserId = new Guid("7edbe094-17b1-4741-9082-dc0a28902272"),
                            RoleId = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3")
                        },
                        new
                        {
                            UserId = new Guid("6ea2a8fa-36b1-4c34-8eaf-832a19f44e19"),
                            RoleId = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3")
                        },
                        new
                        {
                            UserId = new Guid("c8c1ae89-0be2-44df-a2b6-d5dd4807de3c"),
                            RoleId = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3")
                        },
                        new
                        {
                            UserId = new Guid("6c010b6a-0d42-490a-b3af-3d1b19aec676"),
                            RoleId = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("models.Model.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnswerValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("models.Model.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("AppUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = new Guid("182b54eb-d431-4016-9545-04bb5ee205f9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92467712-efa5-42c6-88e6-dff8c72a1111",
                            Email = "Admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEINP4/Tp27HM12j+3Otp1OuEpqQE0gpqSm6i6XOBd7GwMrrPkYHqgJo+3wROGuZHyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("models.Model.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Coupons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8c84f91-e8a0-4c18-b367-8316159d374e"),
                            Code = "خصمf8572",
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Discount = 25,
                            EndDate = new DateTime(2025, 5, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6938),
                            StartDate = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6934)
                        },
                        new
                        {
                            Id = new Guid("072e6a1a-5f36-476a-9308-8e2c12ba6467"),
                            Code = "خصم423fa",
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Discount = 25,
                            EndDate = new DateTime(2025, 5, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6953),
                            StartDate = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6949)
                        },
                        new
                        {
                            Id = new Guid("5d280b0b-163a-4e44-99a8-d8583f32fd3d"),
                            Code = "خصم3353a",
                            CourseId = new Guid("3353a971-11b2-4f78-a997-51afe0829cc4"),
                            Discount = 25,
                            EndDate = new DateTime(2025, 5, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6965),
                            StartDate = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6962)
                        },
                        new
                        {
                            Id = new Guid("7ea3912f-90c1-4237-92af-920d4773f835"),
                            Code = "خصمe6522",
                            CourseId = new Guid("e6522e87-dddf-45aa-a8bb-d2e53c5714c3"),
                            Discount = 25,
                            EndDate = new DateTime(2025, 5, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6976),
                            StartDate = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6973)
                        },
                        new
                        {
                            Id = new Guid("126e9ffd-a509-4ff6-b3f5-9cbace6c0661"),
                            Code = "خصمb8a0f",
                            CourseId = new Guid("b8a0f844-c625-4e57-9a36-94979e8e12cb"),
                            Discount = 25,
                            EndDate = new DateTime(2025, 5, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6987),
                            StartDate = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6983)
                        });
                });

            modelBuilder.Entity("models.Model.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Description = "دورة شاملة في الرياضيات تغطي المنهج الكامل للثانوية العامة مع حل مسائل وتمارين إضافية",
                            EndDate = new DateTime(2025, 6, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4542),
                            ImageUrl = "course1.jpg",
                            Price = 500m,
                            StartDate = new DateTime(2025, 4, 11, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4464),
                            Title = "الرياضيات المتقدمة للثانوية العامة",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Description = "شرح مفصل للفيزياء مع التركيز على المسائل العملية والتجارب المعملية",
                            EndDate = new DateTime(2025, 7, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4591),
                            ImageUrl = "course2.jpg",
                            Price = 1000m,
                            StartDate = new DateTime(2025, 4, 12, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4588),
                            Title = "الفيزياء التطبيقية للصف الثالث الثانوي",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("3353a971-11b2-4f78-a997-51afe0829cc4"),
                            Description = "دورة متكاملة في الكيمياء العضوية مع شرح التفاعلات والمركبات الكيميائية",
                            EndDate = new DateTime(2025, 8, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4598),
                            ImageUrl = "course3.jpg",
                            Price = 1500m,
                            StartDate = new DateTime(2025, 4, 13, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4595),
                            Title = "الكيمياء العضوية للثانوية العامة",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("e6522e87-dddf-45aa-a8bb-d2e53c5714c3"),
                            Description = "دورة متخصصة في قواعد اللغة العربية والأدب مع تحليل النصوص الأدبية",
                            EndDate = new DateTime(2025, 9, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4605),
                            ImageUrl = "course4.jpg",
                            Price = 2000m,
                            StartDate = new DateTime(2025, 4, 14, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4602),
                            Title = "اللغة العربية - النحو والأدب",
                            Year = 2024
                        },
                        new
                        {
                            Id = new Guid("b8a0f844-c625-4e57-9a36-94979e8e12cb"),
                            Description = "دورة مكثفة في اللغة الإنجليزية تشمل القواعد والمحادثة والكتابة",
                            EndDate = new DateTime(2025, 10, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4612),
                            ImageUrl = "course5.jpg",
                            Price = 2500m,
                            StartDate = new DateTime(2025, 4, 15, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4609),
                            Title = "اللغة الإنجليزية - المستوى المتقدم",
                            Year = 2024
                        });
                });

            modelBuilder.Entity("models.Model.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07911df9-c351-4daf-8896-f5cda5f1d1b8"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            DurationInMinutes = 90,
                            StartDate = new DateTime(2025, 6, 3, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4542),
                            Title = "الاختبار النهائي - الرياضيات المتقدمة للثانوية العامة"
                        },
                        new
                        {
                            Id = new Guid("040f9cf1-08ee-42e1-8dd4-9ed60a5c6f54"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            DurationInMinutes = 90,
                            StartDate = new DateTime(2025, 7, 3, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4591),
                            Title = "الاختبار النهائي - الفيزياء التطبيقية للصف الثالث الثانوي"
                        },
                        new
                        {
                            Id = new Guid("09038571-6a06-40c5-a8f8-0eda1a1a0888"),
                            CourseId = new Guid("3353a971-11b2-4f78-a997-51afe0829cc4"),
                            DurationInMinutes = 90,
                            StartDate = new DateTime(2025, 8, 3, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4598),
                            Title = "الاختبار النهائي - الكيمياء العضوية للثانوية العامة"
                        },
                        new
                        {
                            Id = new Guid("2a1d020b-f452-49ae-a7db-8f513e7de73d"),
                            CourseId = new Guid("e6522e87-dddf-45aa-a8bb-d2e53c5714c3"),
                            DurationInMinutes = 90,
                            StartDate = new DateTime(2025, 9, 3, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4605),
                            Title = "الاختبار النهائي - اللغة العربية - النحو والأدب"
                        },
                        new
                        {
                            Id = new Guid("c939d2f1-3cf1-4fd2-836a-49a636dee20d"),
                            CourseId = new Guid("b8a0f844-c625-4e57-9a36-94979e8e12cb"),
                            DurationInMinutes = 90,
                            StartDate = new DateTime(2025, 10, 3, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(4612),
                            Title = "الاختبار النهائي - اللغة الإنجليزية - المستوى المتقدم"
                        });
                });

            modelBuilder.Entity("models.Model.ExamSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExamSession");
                });

            modelBuilder.Entity("models.Model.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 4, 10, 11, 52, 27, 731, DateTimeKind.Local).AddTicks(9512));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("PdfUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b547919-e79a-41eb-8ce1-f3eb0e493bf2"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5257),
                            Description = "شرح تفصيلي لمقدمة وأساسيات في مادة الرياضيات المتقدمة للثانوية العامة",
                            IsFree = true,
                            PdfUrl = "lesson_الرياضيات المتقدمة للثانوية العامة_1.pdf",
                            Title = "مقدمة وأساسيات",
                            VideoUrl = "video_الرياضيات المتقدمة للثانوية العامة_1.mp4"
                        },
                        new
                        {
                            Id = new Guid("0eb8132e-c1de-4413-a9c6-d86023b24b3a"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5271),
                            Description = "شرح تفصيلي لالمفاهيم الأساسية في مادة الرياضيات المتقدمة للثانوية العامة",
                            IsFree = false,
                            PdfUrl = "lesson_الرياضيات المتقدمة للثانوية العامة_2.pdf",
                            Title = "المفاهيم الأساسية",
                            VideoUrl = "video_الرياضيات المتقدمة للثانوية العامة_2.mp4"
                        },
                        new
                        {
                            Id = new Guid("997590f1-916f-4358-91d2-26fc7c7d5068"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5277),
                            Description = "شرح تفصيلي لتمارين وتطبيقات في مادة الرياضيات المتقدمة للثانوية العامة",
                            IsFree = false,
                            PdfUrl = "lesson_الرياضيات المتقدمة للثانوية العامة_3.pdf",
                            Title = "تمارين وتطبيقات",
                            VideoUrl = "video_الرياضيات المتقدمة للثانوية العامة_3.mp4"
                        },
                        new
                        {
                            Id = new Guid("16b521db-2d96-4835-8ff5-a4603e8a15bd"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5339),
                            Description = "شرح تفصيلي لالمراجعة النهائية في مادة الرياضيات المتقدمة للثانوية العامة",
                            IsFree = false,
                            PdfUrl = "lesson_الرياضيات المتقدمة للثانوية العامة_4.pdf",
                            Title = "المراجعة النهائية",
                            VideoUrl = "video_الرياضيات المتقدمة للثانوية العامة_4.mp4"
                        },
                        new
                        {
                            Id = new Guid("f9fbae30-03f3-4c22-9e60-a29698b2b0e9"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5348),
                            Description = "شرح تفصيلي لالقوانين الأساسية في مادة الفيزياء التطبيقية للصف الثالث الثانوي",
                            IsFree = true,
                            PdfUrl = "lesson_الفيزياء التطبيقية للصف الثالث الثانوي_1.pdf",
                            Title = "القوانين الأساسية",
                            VideoUrl = "video_الفيزياء التطبيقية للصف الثالث الثانوي_1.mp4"
                        },
                        new
                        {
                            Id = new Guid("0c12f8b6-292b-4d31-8d73-c1924cb3352f"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5375),
                            Description = "شرح تفصيلي لالحركة والقوة في مادة الفيزياء التطبيقية للصف الثالث الثانوي",
                            IsFree = false,
                            PdfUrl = "lesson_الفيزياء التطبيقية للصف الثالث الثانوي_2.pdf",
                            Title = "الحركة والقوة",
                            VideoUrl = "video_الفيزياء التطبيقية للصف الثالث الثانوي_2.mp4"
                        },
                        new
                        {
                            Id = new Guid("79fcfc34-1f40-433f-9a53-c54fbc0d35c6"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5381),
                            Description = "شرح تفصيلي لالطاقة والشغل في مادة الفيزياء التطبيقية للصف الثالث الثانوي",
                            IsFree = false,
                            PdfUrl = "lesson_الفيزياء التطبيقية للصف الثالث الثانوي_3.pdf",
                            Title = "الطاقة والشغل",
                            VideoUrl = "video_الفيزياء التطبيقية للصف الثالث الثانوي_3.mp4"
                        },
                        new
                        {
                            Id = new Guid("3b5a097c-7110-4401-9c79-a4d2903ba499"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5386),
                            Description = "شرح تفصيلي لالتطبيقات العملية في مادة الفيزياء التطبيقية للصف الثالث الثانوي",
                            IsFree = false,
                            PdfUrl = "lesson_الفيزياء التطبيقية للصف الثالث الثانوي_4.pdf",
                            Title = "التطبيقات العملية",
                            VideoUrl = "video_الفيزياء التطبيقية للصف الثالث الثانوي_4.mp4"
                        },
                        new
                        {
                            Id = new Guid("5b8249ec-669d-4cc7-9228-6485151149ad"),
                            CourseId = new Guid("3353a971-11b2-4f78-a997-51afe0829cc4"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5400),
                            Description = "شرح تفصيلي لالمركبات العضوية في مادة الكيمياء العضوية للثانوية العامة",
                            IsFree = true,
                            PdfUrl = "lesson_الكيمياء العضوية للثانوية العامة_1.pdf",
                            Title = "المركبات العضوية",
                            VideoUrl = "video_الكيمياء العضوية للثانوية العامة_1.mp4"
                        },
                        new
                        {
                            Id = new Guid("ee253947-401a-46b4-b9ac-e1382313060b"),
                            CourseId = new Guid("3353a971-11b2-4f78-a997-51afe0829cc4"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5407),
                            Description = "شرح تفصيلي لالتفاعلات الكيميائية في مادة الكيمياء العضوية للثانوية العامة",
                            IsFree = false,
                            PdfUrl = "lesson_الكيمياء العضوية للثانوية العامة_2.pdf",
                            Title = "التفاعلات الكيميائية",
                            VideoUrl = "video_الكيمياء العضوية للثانوية العامة_2.mp4"
                        },
                        new
                        {
                            Id = new Guid("f2368062-0878-4681-95c0-babf0dee955c"),
                            CourseId = new Guid("3353a971-11b2-4f78-a997-51afe0829cc4"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5411),
                            Description = "شرح تفصيلي لالمجموعات الوظيفية في مادة الكيمياء العضوية للثانوية العامة",
                            IsFree = false,
                            PdfUrl = "lesson_الكيمياء العضوية للثانوية العامة_3.pdf",
                            Title = "المجموعات الوظيفية",
                            VideoUrl = "video_الكيمياء العضوية للثانوية العامة_3.mp4"
                        },
                        new
                        {
                            Id = new Guid("13590ac6-c31f-4294-9e9b-f9fd5243a691"),
                            CourseId = new Guid("3353a971-11b2-4f78-a997-51afe0829cc4"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5416),
                            Description = "شرح تفصيلي لالتجارب المعملية في مادة الكيمياء العضوية للثانوية العامة",
                            IsFree = false,
                            PdfUrl = "lesson_الكيمياء العضوية للثانوية العامة_4.pdf",
                            Title = "التجارب المعملية",
                            VideoUrl = "video_الكيمياء العضوية للثانوية العامة_4.mp4"
                        },
                        new
                        {
                            Id = new Guid("95de1535-98a9-4d66-81d1-6a5b883e5702"),
                            CourseId = new Guid("e6522e87-dddf-45aa-a8bb-d2e53c5714c3"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5423),
                            Description = "شرح تفصيلي لقواعد النحو في مادة اللغة العربية - النحو والأدب",
                            IsFree = true,
                            PdfUrl = "lesson_اللغة العربية - النحو والأدب_1.pdf",
                            Title = "قواعد النحو",
                            VideoUrl = "video_اللغة العربية - النحو والأدب_1.mp4"
                        },
                        new
                        {
                            Id = new Guid("6fbca84f-edbc-4946-b34a-d6acee79f5cd"),
                            CourseId = new Guid("e6522e87-dddf-45aa-a8bb-d2e53c5714c3"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5429),
                            Description = "شرح تفصيلي لالبلاغة في مادة اللغة العربية - النحو والأدب",
                            IsFree = false,
                            PdfUrl = "lesson_اللغة العربية - النحو والأدب_2.pdf",
                            Title = "البلاغة",
                            VideoUrl = "video_اللغة العربية - النحو والأدب_2.mp4"
                        },
                        new
                        {
                            Id = new Guid("a8c0b759-cf83-48f6-a4c2-ffcd06402451"),
                            CourseId = new Guid("e6522e87-dddf-45aa-a8bb-d2e53c5714c3"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5439),
                            Description = "شرح تفصيلي لتحليل النصوص في مادة اللغة العربية - النحو والأدب",
                            IsFree = false,
                            PdfUrl = "lesson_اللغة العربية - النحو والأدب_3.pdf",
                            Title = "تحليل النصوص",
                            VideoUrl = "video_اللغة العربية - النحو والأدب_3.mp4"
                        },
                        new
                        {
                            Id = new Guid("4d685898-e389-4fa8-8ffe-153d81787411"),
                            CourseId = new Guid("e6522e87-dddf-45aa-a8bb-d2e53c5714c3"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5444),
                            Description = "شرح تفصيلي لالتعبير الكتابي في مادة اللغة العربية - النحو والأدب",
                            IsFree = false,
                            PdfUrl = "lesson_اللغة العربية - النحو والأدب_4.pdf",
                            Title = "التعبير الكتابي",
                            VideoUrl = "video_اللغة العربية - النحو والأدب_4.mp4"
                        },
                        new
                        {
                            Id = new Guid("d36c235e-89e8-40cf-aa93-541099b4ed78"),
                            CourseId = new Guid("b8a0f844-c625-4e57-9a36-94979e8e12cb"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5451),
                            Description = "شرح تفصيلي لالقواعد المتقدمة في مادة اللغة الإنجليزية - المستوى المتقدم",
                            IsFree = true,
                            PdfUrl = "lesson_اللغة الإنجليزية - المستوى المتقدم_1.pdf",
                            Title = "القواعد المتقدمة",
                            VideoUrl = "video_اللغة الإنجليزية - المستوى المتقدم_1.mp4"
                        },
                        new
                        {
                            Id = new Guid("28617e47-cb6c-4859-ba25-e825e8e49b3d"),
                            CourseId = new Guid("b8a0f844-c625-4e57-9a36-94979e8e12cb"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5457),
                            Description = "شرح تفصيلي لمهارات المحادثة في مادة اللغة الإنجليزية - المستوى المتقدم",
                            IsFree = false,
                            PdfUrl = "lesson_اللغة الإنجليزية - المستوى المتقدم_2.pdf",
                            Title = "مهارات المحادثة",
                            VideoUrl = "video_اللغة الإنجليزية - المستوى المتقدم_2.mp4"
                        },
                        new
                        {
                            Id = new Guid("9c2abc9b-9dbf-4d1c-a4fc-0671202c28a9"),
                            CourseId = new Guid("b8a0f844-c625-4e57-9a36-94979e8e12cb"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5531),
                            Description = "شرح تفصيلي لفهم النصوص في مادة اللغة الإنجليزية - المستوى المتقدم",
                            IsFree = false,
                            PdfUrl = "lesson_اللغة الإنجليزية - المستوى المتقدم_3.pdf",
                            Title = "فهم النصوص",
                            VideoUrl = "video_اللغة الإنجليزية - المستوى المتقدم_3.mp4"
                        },
                        new
                        {
                            Id = new Guid("b9e0938b-a352-4ca7-a167-9c94ea951c9e"),
                            CourseId = new Guid("b8a0f844-c625-4e57-9a36-94979e8e12cb"),
                            CreatedAt = new DateTime(2025, 4, 10, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(5542),
                            Description = "شرح تفصيلي لالكتابة الإبداعية في مادة اللغة الإنجليزية - المستوى المتقدم",
                            IsFree = false,
                            PdfUrl = "lesson_اللغة الإنجليزية - المستوى المتقدم_4.pdf",
                            Title = "الكتابة الإبداعية",
                            VideoUrl = "video_اللغة الإنجليزية - المستوى المتقدم_4.mp4"
                        });
                });

            modelBuilder.Entity("models.Model.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b96acfca-6b1c-4eeb-9e1a-d7d488abcef8"),
                            Amount = 500m,
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Date = new DateTime(2025, 3, 14, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6670),
                            Status = "مكتمل",
                            StudentId = new Guid("e1aa04ca-694f-4efc-b90c-3d9cf54fbe96")
                        },
                        new
                        {
                            Id = new Guid("7c534eb3-7f8c-49a0-9e1d-b56820c47a45"),
                            Amount = 1000m,
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Date = new DateTime(2025, 4, 1, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6681),
                            Status = "مكتمل",
                            StudentId = new Guid("e1aa04ca-694f-4efc-b90c-3d9cf54fbe96")
                        },
                        new
                        {
                            Id = new Guid("26633807-5ca5-4877-8ea0-c7cd6c29da79"),
                            Amount = 500m,
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Date = new DateTime(2025, 4, 8, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6698),
                            Status = "مكتمل",
                            StudentId = new Guid("d43ae3f5-659a-458a-949f-f56fac95c00c")
                        },
                        new
                        {
                            Id = new Guid("8a447731-5fc2-417b-b1b0-abe47cdaefe9"),
                            Amount = 1000m,
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Date = new DateTime(2025, 4, 2, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6703),
                            Status = "مكتمل",
                            StudentId = new Guid("d43ae3f5-659a-458a-949f-f56fac95c00c")
                        },
                        new
                        {
                            Id = new Guid("f1ecd094-71ae-4007-b4d6-a902c7a3880f"),
                            Amount = 500m,
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Date = new DateTime(2025, 3, 18, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6707),
                            Status = "مكتمل",
                            StudentId = new Guid("8482fac0-379d-41fb-b46c-d57b6790a31c")
                        },
                        new
                        {
                            Id = new Guid("8a5b5aff-2ee9-4575-92ee-73de21b9c36b"),
                            Amount = 1000m,
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Date = new DateTime(2025, 4, 6, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6716),
                            Status = "مكتمل",
                            StudentId = new Guid("8482fac0-379d-41fb-b46c-d57b6790a31c")
                        },
                        new
                        {
                            Id = new Guid("5266f730-d81b-4555-95de-ed99f2347e84"),
                            Amount = 500m,
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Date = new DateTime(2025, 4, 5, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6722),
                            Status = "مكتمل",
                            StudentId = new Guid("41906696-d1a6-4bf6-8f35-8fe9e3ddb7d2")
                        },
                        new
                        {
                            Id = new Guid("4c1eff16-04d8-4fec-8768-e1afdc206675"),
                            Amount = 1000m,
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Date = new DateTime(2025, 3, 27, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6727),
                            Status = "مكتمل",
                            StudentId = new Guid("41906696-d1a6-4bf6-8f35-8fe9e3ddb7d2")
                        },
                        new
                        {
                            Id = new Guid("116f54e0-163a-4c3d-95d2-03213ce1917f"),
                            Amount = 500m,
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Date = new DateTime(2025, 3, 17, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6771),
                            Status = "مكتمل",
                            StudentId = new Guid("441baea8-ba1a-40c6-bc9b-27ddcff7dd10")
                        },
                        new
                        {
                            Id = new Guid("418f3325-cbac-48c1-a8a7-66522e45bcbb"),
                            Amount = 1000m,
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Date = new DateTime(2025, 4, 4, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6778),
                            Status = "مكتمل",
                            StudentId = new Guid("441baea8-ba1a-40c6-bc9b-27ddcff7dd10")
                        },
                        new
                        {
                            Id = new Guid("35cc07e5-f436-40c4-95a0-93a8e7dd53c8"),
                            Amount = 500m,
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Date = new DateTime(2025, 3, 14, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6782),
                            Status = "مكتمل",
                            StudentId = new Guid("c89a74d7-ade4-4d53-9ad8-d3d7a3d778f1")
                        },
                        new
                        {
                            Id = new Guid("a19c2d08-3b21-4b25-889e-4de8ea9f2eb9"),
                            Amount = 1000m,
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Date = new DateTime(2025, 3, 21, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6787),
                            Status = "مكتمل",
                            StudentId = new Guid("c89a74d7-ade4-4d53-9ad8-d3d7a3d778f1")
                        },
                        new
                        {
                            Id = new Guid("d6ce4396-e5c4-4df8-acd1-3eba25203f8c"),
                            Amount = 500m,
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Date = new DateTime(2025, 4, 9, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6792),
                            Status = "مكتمل",
                            StudentId = new Guid("7edbe094-17b1-4741-9082-dc0a28902272")
                        },
                        new
                        {
                            Id = new Guid("87e5aa93-94a9-4243-aeb5-e058dbd5762e"),
                            Amount = 1000m,
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Date = new DateTime(2025, 3, 28, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6796),
                            Status = "مكتمل",
                            StudentId = new Guid("7edbe094-17b1-4741-9082-dc0a28902272")
                        },
                        new
                        {
                            Id = new Guid("93b8af27-dc1f-4aaa-9498-fd43c5646f9f"),
                            Amount = 500m,
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Date = new DateTime(2025, 3, 22, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6803),
                            Status = "مكتمل",
                            StudentId = new Guid("6ea2a8fa-36b1-4c34-8eaf-832a19f44e19")
                        },
                        new
                        {
                            Id = new Guid("89cf4400-7946-4839-a0dd-e3abc4bfe65d"),
                            Amount = 1000m,
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Date = new DateTime(2025, 3, 15, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6807),
                            Status = "مكتمل",
                            StudentId = new Guid("6ea2a8fa-36b1-4c34-8eaf-832a19f44e19")
                        },
                        new
                        {
                            Id = new Guid("29671848-c658-4952-ab84-e74a147b67a7"),
                            Amount = 500m,
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Date = new DateTime(2025, 4, 8, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6811),
                            Status = "مكتمل",
                            StudentId = new Guid("c8c1ae89-0be2-44df-a2b6-d5dd4807de3c")
                        },
                        new
                        {
                            Id = new Guid("3434d8e0-6c28-428d-a89b-c8a8e5b3d1f8"),
                            Amount = 1000m,
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Date = new DateTime(2025, 3, 29, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6816),
                            Status = "مكتمل",
                            StudentId = new Guid("c8c1ae89-0be2-44df-a2b6-d5dd4807de3c")
                        },
                        new
                        {
                            Id = new Guid("788c3d92-41dc-4439-a7e1-eaca8c9e0768"),
                            Amount = 500m,
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            Date = new DateTime(2025, 4, 4, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6820),
                            Status = "مكتمل",
                            StudentId = new Guid("6c010b6a-0d42-490a-b3af-3d1b19aec676")
                        },
                        new
                        {
                            Id = new Guid("8b9891a5-7549-4e6e-b87a-928efd20ed57"),
                            Amount = 1000m,
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            Date = new DateTime(2025, 3, 15, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6831),
                            Status = "مكتمل",
                            StudentId = new Guid("6c010b6a-0d42-490a-b3af-3d1b19aec676")
                        });
                });

            modelBuilder.Entity("models.Model.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40330b62-3d6a-427e-b87f-06cd8e2cdddd"),
                            Answer = "الإجابة الصحيحة 1",
                            ExamId = new Guid("07911df9-c351-4daf-8896-f5cda5f1d1b8"),
                            QuestionDescription = "ما هو حل المعادلة س²+ 4س + 4 = 0؟"
                        },
                        new
                        {
                            Id = new Guid("4040c0b8-1822-444e-a6e3-cefefa3df0c7"),
                            Answer = "الإجابة الصحيحة 2",
                            ExamId = new Guid("07911df9-c351-4daf-8896-f5cda5f1d1b8"),
                            QuestionDescription = "ما هي قيمة النهاية عندما س تقترب من 2؟"
                        },
                        new
                        {
                            Id = new Guid("dd5da33a-017f-46f1-af86-85ff24902d70"),
                            Answer = "الإجابة الصحيحة 3",
                            ExamId = new Guid("07911df9-c351-4daf-8896-f5cda5f1d1b8"),
                            QuestionDescription = "ما هو التكامل غير المحدد للدالة 2س + 1؟"
                        },
                        new
                        {
                            Id = new Guid("12f4c332-5e13-40be-ab80-9621443fe9d2"),
                            Answer = "الإجابة الصحيحة 4",
                            ExamId = new Guid("07911df9-c351-4daf-8896-f5cda5f1d1b8"),
                            QuestionDescription = "ما هو مجال الدالة الجذرية √(س-1)؟"
                        },
                        new
                        {
                            Id = new Guid("aa40ce8b-26ac-40db-8f59-c32e0a765265"),
                            Answer = "الإجابة الصحيحة 5",
                            ExamId = new Guid("07911df9-c351-4daf-8896-f5cda5f1d1b8"),
                            QuestionDescription = "احسب مساحة المثلث الذي أطواله 3، 4، 5"
                        },
                        new
                        {
                            Id = new Guid("bfc108f4-c6ea-401f-bdd8-9f1fc1b0eebb"),
                            Answer = "الإجابة الصحيحة 1",
                            ExamId = new Guid("040f9cf1-08ee-42e1-8dd4-9ed60a5c6f54"),
                            QuestionDescription = "ما هو قانون نيوتن الثالث؟"
                        },
                        new
                        {
                            Id = new Guid("1a252041-ccc4-4897-9892-9cff00ba15bb"),
                            Answer = "الإجابة الصحيحة 2",
                            ExamId = new Guid("040f9cf1-08ee-42e1-8dd4-9ed60a5c6f54"),
                            QuestionDescription = "كيف تحسب الطاقة الحركية لجسم؟"
                        },
                        new
                        {
                            Id = new Guid("2ace33bc-84ad-4eea-9743-1c35a99e6d79"),
                            Answer = "الإجابة الصحيحة 3",
                            ExamId = new Guid("040f9cf1-08ee-42e1-8dd4-9ed60a5c6f54"),
                            QuestionDescription = "ما هي وحدة قياس القوة في النظام الدولي؟"
                        },
                        new
                        {
                            Id = new Guid("20cd2b95-f246-458a-a909-6d2cceaefcb0"),
                            Answer = "الإجابة الصحيحة 4",
                            ExamId = new Guid("040f9cf1-08ee-42e1-8dd4-9ed60a5c6f54"),
                            QuestionDescription = "اشرح مبدأ حفظ الطاقة"
                        },
                        new
                        {
                            Id = new Guid("a8024ded-9c15-4f12-b771-8c09f1ca95e2"),
                            Answer = "الإجابة الصحيحة 5",
                            ExamId = new Guid("040f9cf1-08ee-42e1-8dd4-9ed60a5c6f54"),
                            QuestionDescription = "ما هو قانون أوم؟"
                        },
                        new
                        {
                            Id = new Guid("d6ce13b8-251f-422e-b153-82accea0d750"),
                            Answer = "الإجابة الصحيحة 1",
                            ExamId = new Guid("09038571-6a06-40c5-a8f8-0eda1a1a0888"),
                            QuestionDescription = "السؤال الأول في الاختبار النهائي - الكيمياء العضوية للثانوية العامة"
                        },
                        new
                        {
                            Id = new Guid("b0c48106-715f-48ba-87d0-aeb27ac5231d"),
                            Answer = "الإجابة الصحيحة 2",
                            ExamId = new Guid("09038571-6a06-40c5-a8f8-0eda1a1a0888"),
                            QuestionDescription = "السؤال الثاني في الاختبار النهائي - الكيمياء العضوية للثانوية العامة"
                        },
                        new
                        {
                            Id = new Guid("136d2ee5-cc72-4814-9e12-3e7c32617fff"),
                            Answer = "الإجابة الصحيحة 3",
                            ExamId = new Guid("09038571-6a06-40c5-a8f8-0eda1a1a0888"),
                            QuestionDescription = "السؤال الثالث في الاختبار النهائي - الكيمياء العضوية للثانوية العامة"
                        },
                        new
                        {
                            Id = new Guid("98282142-f9c6-4a4d-8ee7-acbb9c94a744"),
                            Answer = "الإجابة الصحيحة 4",
                            ExamId = new Guid("09038571-6a06-40c5-a8f8-0eda1a1a0888"),
                            QuestionDescription = "السؤال الرابع في الاختبار النهائي - الكيمياء العضوية للثانوية العامة"
                        },
                        new
                        {
                            Id = new Guid("65a3b0cb-6c69-4c65-b895-d0083f3fc869"),
                            Answer = "الإجابة الصحيحة 5",
                            ExamId = new Guid("09038571-6a06-40c5-a8f8-0eda1a1a0888"),
                            QuestionDescription = "السؤال الخامس في الاختبار النهائي - الكيمياء العضوية للثانوية العامة"
                        },
                        new
                        {
                            Id = new Guid("0b804058-92af-490c-820f-60401b6d44ff"),
                            Answer = "الإجابة الصحيحة 1",
                            ExamId = new Guid("2a1d020b-f452-49ae-a7db-8f513e7de73d"),
                            QuestionDescription = "السؤال الأول في الاختبار النهائي - اللغة العربية - النحو والأدب"
                        },
                        new
                        {
                            Id = new Guid("844ed8cc-b48d-434c-887f-acae05dc9924"),
                            Answer = "الإجابة الصحيحة 2",
                            ExamId = new Guid("2a1d020b-f452-49ae-a7db-8f513e7de73d"),
                            QuestionDescription = "السؤال الثاني في الاختبار النهائي - اللغة العربية - النحو والأدب"
                        },
                        new
                        {
                            Id = new Guid("4301af88-cacf-4bf9-9e8c-0b9a5a1baef3"),
                            Answer = "الإجابة الصحيحة 3",
                            ExamId = new Guid("2a1d020b-f452-49ae-a7db-8f513e7de73d"),
                            QuestionDescription = "السؤال الثالث في الاختبار النهائي - اللغة العربية - النحو والأدب"
                        },
                        new
                        {
                            Id = new Guid("fe8da9d8-0bf0-468e-8596-2e96e0dd97ce"),
                            Answer = "الإجابة الصحيحة 4",
                            ExamId = new Guid("2a1d020b-f452-49ae-a7db-8f513e7de73d"),
                            QuestionDescription = "السؤال الرابع في الاختبار النهائي - اللغة العربية - النحو والأدب"
                        },
                        new
                        {
                            Id = new Guid("be03d07d-4582-4bbc-9ab2-35ba6d5b3f79"),
                            Answer = "الإجابة الصحيحة 5",
                            ExamId = new Guid("2a1d020b-f452-49ae-a7db-8f513e7de73d"),
                            QuestionDescription = "السؤال الخامس في الاختبار النهائي - اللغة العربية - النحو والأدب"
                        },
                        new
                        {
                            Id = new Guid("f2eeb56d-f800-46ee-8461-b13ea5f489a5"),
                            Answer = "الإجابة الصحيحة 1",
                            ExamId = new Guid("c939d2f1-3cf1-4fd2-836a-49a636dee20d"),
                            QuestionDescription = "السؤال الأول في الاختبار النهائي - اللغة الإنجليزية - المستوى المتقدم"
                        },
                        new
                        {
                            Id = new Guid("662d775e-c5f3-468a-a819-28e9a75a0d18"),
                            Answer = "الإجابة الصحيحة 2",
                            ExamId = new Guid("c939d2f1-3cf1-4fd2-836a-49a636dee20d"),
                            QuestionDescription = "السؤال الثاني في الاختبار النهائي - اللغة الإنجليزية - المستوى المتقدم"
                        },
                        new
                        {
                            Id = new Guid("b38edf74-351d-4e28-a2a0-9f5d85fd0301"),
                            Answer = "الإجابة الصحيحة 3",
                            ExamId = new Guid("c939d2f1-3cf1-4fd2-836a-49a636dee20d"),
                            QuestionDescription = "السؤال الثالث في الاختبار النهائي - اللغة الإنجليزية - المستوى المتقدم"
                        },
                        new
                        {
                            Id = new Guid("714d9e89-b3d5-419f-9201-ebf58e3ca1b9"),
                            Answer = "الإجابة الصحيحة 4",
                            ExamId = new Guid("c939d2f1-3cf1-4fd2-836a-49a636dee20d"),
                            QuestionDescription = "السؤال الرابع في الاختبار النهائي - اللغة الإنجليزية - المستوى المتقدم"
                        },
                        new
                        {
                            Id = new Guid("2427299d-bcf5-483f-bd55-930908251b48"),
                            Answer = "الإجابة الصحيحة 5",
                            ExamId = new Guid("c939d2f1-3cf1-4fd2-836a-49a636dee20d"),
                            QuestionDescription = "السؤال الخامس في الاختبار النهائي - اللغة الإنجليزية - المستوى المتقدم"
                        });
                });

            modelBuilder.Entity("models.Model.QuestionChoices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Choice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionChoices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aac9fdb3-6b27-4f22-ae38-cedd7af9868c"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("40330b62-3d6a-427e-b87f-06cd8e2cdddd")
                        },
                        new
                        {
                            Id = new Guid("5be0bae5-7e11-41e1-aa4b-8c16481a60a1"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("40330b62-3d6a-427e-b87f-06cd8e2cdddd")
                        },
                        new
                        {
                            Id = new Guid("8e5ea502-7a95-48d2-9e3a-0f624679865a"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("40330b62-3d6a-427e-b87f-06cd8e2cdddd")
                        },
                        new
                        {
                            Id = new Guid("3fb361c8-8872-44ea-a934-0d1195373db4"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("40330b62-3d6a-427e-b87f-06cd8e2cdddd")
                        },
                        new
                        {
                            Id = new Guid("87222698-36f7-4577-806a-b25df457e994"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("4040c0b8-1822-444e-a6e3-cefefa3df0c7")
                        },
                        new
                        {
                            Id = new Guid("6b17298d-3279-4262-9d8d-d5b92bb6b06e"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("4040c0b8-1822-444e-a6e3-cefefa3df0c7")
                        },
                        new
                        {
                            Id = new Guid("15e00829-dc2d-47c7-878f-8bf099a405e9"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("4040c0b8-1822-444e-a6e3-cefefa3df0c7")
                        },
                        new
                        {
                            Id = new Guid("eb49ef04-acb5-480b-a996-76ef31caddd0"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("4040c0b8-1822-444e-a6e3-cefefa3df0c7")
                        },
                        new
                        {
                            Id = new Guid("5a34de42-dfd1-4b7a-befb-a2035285c824"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("dd5da33a-017f-46f1-af86-85ff24902d70")
                        },
                        new
                        {
                            Id = new Guid("c3d7b776-f257-4e67-bc15-5f561e1e4242"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("dd5da33a-017f-46f1-af86-85ff24902d70")
                        },
                        new
                        {
                            Id = new Guid("b5648543-bde8-453e-a3f7-077b9f322972"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("dd5da33a-017f-46f1-af86-85ff24902d70")
                        },
                        new
                        {
                            Id = new Guid("95eff022-b4fb-4d36-9807-b266a5755092"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("dd5da33a-017f-46f1-af86-85ff24902d70")
                        },
                        new
                        {
                            Id = new Guid("ddd098fe-8074-4a9b-923c-efd1731b8908"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("12f4c332-5e13-40be-ab80-9621443fe9d2")
                        },
                        new
                        {
                            Id = new Guid("54ee2fc4-719b-4a79-aaff-02f7e4e9c703"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("12f4c332-5e13-40be-ab80-9621443fe9d2")
                        },
                        new
                        {
                            Id = new Guid("fdff5c7b-d9cf-4817-a2d0-d742feb70168"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("12f4c332-5e13-40be-ab80-9621443fe9d2")
                        },
                        new
                        {
                            Id = new Guid("b896e8bb-8594-4cae-aa61-a440f16217d3"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("12f4c332-5e13-40be-ab80-9621443fe9d2")
                        },
                        new
                        {
                            Id = new Guid("c11130bf-7883-4db8-96d5-c924f7b23396"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("aa40ce8b-26ac-40db-8f59-c32e0a765265")
                        },
                        new
                        {
                            Id = new Guid("31cd965b-8f4e-440c-bbed-3a124c5f6d8b"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("aa40ce8b-26ac-40db-8f59-c32e0a765265")
                        },
                        new
                        {
                            Id = new Guid("b52d20fb-6f17-4135-be05-6892cd8a5995"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("aa40ce8b-26ac-40db-8f59-c32e0a765265")
                        },
                        new
                        {
                            Id = new Guid("fc50488a-c26b-4a89-8564-b0afe3232a82"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("aa40ce8b-26ac-40db-8f59-c32e0a765265")
                        },
                        new
                        {
                            Id = new Guid("19c00c3f-62eb-4572-8526-1ab4de48fb7b"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("bfc108f4-c6ea-401f-bdd8-9f1fc1b0eebb")
                        },
                        new
                        {
                            Id = new Guid("b89df517-a86e-4f5e-8427-5ecc6c99e46a"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("bfc108f4-c6ea-401f-bdd8-9f1fc1b0eebb")
                        },
                        new
                        {
                            Id = new Guid("fbc68e95-de59-44fe-b94e-46f873743f5d"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("bfc108f4-c6ea-401f-bdd8-9f1fc1b0eebb")
                        },
                        new
                        {
                            Id = new Guid("dd84f2d5-74de-4e3d-b55d-accb9b0d1412"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("bfc108f4-c6ea-401f-bdd8-9f1fc1b0eebb")
                        },
                        new
                        {
                            Id = new Guid("b4c7b6c6-9f6b-448f-bcaa-5b898dda8293"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("1a252041-ccc4-4897-9892-9cff00ba15bb")
                        },
                        new
                        {
                            Id = new Guid("03e4454f-dc86-4442-92a7-7a219c698eea"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("1a252041-ccc4-4897-9892-9cff00ba15bb")
                        },
                        new
                        {
                            Id = new Guid("6aa0382a-0d53-4ace-b1e2-d4140ab863a9"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("1a252041-ccc4-4897-9892-9cff00ba15bb")
                        },
                        new
                        {
                            Id = new Guid("a8f8bfed-aa33-478c-8971-808c5937f48c"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("1a252041-ccc4-4897-9892-9cff00ba15bb")
                        },
                        new
                        {
                            Id = new Guid("e19f8e5e-e248-4ce9-b8cc-fb9370c18153"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("2ace33bc-84ad-4eea-9743-1c35a99e6d79")
                        },
                        new
                        {
                            Id = new Guid("18caced7-9288-4a02-b4b9-49c72dad9ba8"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("2ace33bc-84ad-4eea-9743-1c35a99e6d79")
                        },
                        new
                        {
                            Id = new Guid("eb83c4c2-114a-45f2-a5d1-44fb14c810e2"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("2ace33bc-84ad-4eea-9743-1c35a99e6d79")
                        },
                        new
                        {
                            Id = new Guid("e1741aa0-8807-4c13-8644-4a7a80953f78"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("2ace33bc-84ad-4eea-9743-1c35a99e6d79")
                        },
                        new
                        {
                            Id = new Guid("f454400a-c60d-4a01-9444-60fe54b6bfb8"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("20cd2b95-f246-458a-a909-6d2cceaefcb0")
                        },
                        new
                        {
                            Id = new Guid("73058ae7-2c5d-4954-9790-51a0e0544737"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("20cd2b95-f246-458a-a909-6d2cceaefcb0")
                        },
                        new
                        {
                            Id = new Guid("45606629-82e9-4133-9646-03cafbdda061"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("20cd2b95-f246-458a-a909-6d2cceaefcb0")
                        },
                        new
                        {
                            Id = new Guid("50422e86-edf4-4aa4-8875-6532e86da0e0"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("20cd2b95-f246-458a-a909-6d2cceaefcb0")
                        },
                        new
                        {
                            Id = new Guid("b3452c68-38f6-458e-8516-ca0cf7cc6bf4"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("a8024ded-9c15-4f12-b771-8c09f1ca95e2")
                        },
                        new
                        {
                            Id = new Guid("10ae4e59-487d-4aec-94fd-b5659c1db7cc"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("a8024ded-9c15-4f12-b771-8c09f1ca95e2")
                        },
                        new
                        {
                            Id = new Guid("5267c32b-af74-4edd-9f23-a59c26a0cd29"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("a8024ded-9c15-4f12-b771-8c09f1ca95e2")
                        },
                        new
                        {
                            Id = new Guid("39657e51-ad6a-4cbd-afc6-7fff55587db8"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("a8024ded-9c15-4f12-b771-8c09f1ca95e2")
                        },
                        new
                        {
                            Id = new Guid("953f851d-9821-463b-ac69-1d72c827e00e"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("d6ce13b8-251f-422e-b153-82accea0d750")
                        },
                        new
                        {
                            Id = new Guid("548c0916-dc1f-4af0-84b2-f61527ae05ff"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("d6ce13b8-251f-422e-b153-82accea0d750")
                        },
                        new
                        {
                            Id = new Guid("87812dee-e2d4-4810-96c4-8cc99d3552cf"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("d6ce13b8-251f-422e-b153-82accea0d750")
                        },
                        new
                        {
                            Id = new Guid("9a961485-a5e6-479e-b097-588be50d7a13"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("d6ce13b8-251f-422e-b153-82accea0d750")
                        },
                        new
                        {
                            Id = new Guid("f3fdb965-2d15-4685-9169-f58c05cbd5cf"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("b0c48106-715f-48ba-87d0-aeb27ac5231d")
                        },
                        new
                        {
                            Id = new Guid("268a96d2-45d8-4846-a528-76897ee78e24"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("b0c48106-715f-48ba-87d0-aeb27ac5231d")
                        },
                        new
                        {
                            Id = new Guid("32259994-f725-48b1-9a53-0c152f0f2ad1"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("b0c48106-715f-48ba-87d0-aeb27ac5231d")
                        },
                        new
                        {
                            Id = new Guid("4d2f55b0-2b2a-4948-a802-c6386c58c307"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("b0c48106-715f-48ba-87d0-aeb27ac5231d")
                        },
                        new
                        {
                            Id = new Guid("2124ca55-c60a-4940-b429-71e6183be2cb"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("136d2ee5-cc72-4814-9e12-3e7c32617fff")
                        },
                        new
                        {
                            Id = new Guid("8f617c39-5fbe-4d93-9932-37fb352c545a"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("136d2ee5-cc72-4814-9e12-3e7c32617fff")
                        },
                        new
                        {
                            Id = new Guid("ade48901-a56e-4b5f-8efd-91dcd9adfe5c"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("136d2ee5-cc72-4814-9e12-3e7c32617fff")
                        },
                        new
                        {
                            Id = new Guid("9bc8c293-b96e-4344-810e-b6d61ae4935d"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("136d2ee5-cc72-4814-9e12-3e7c32617fff")
                        },
                        new
                        {
                            Id = new Guid("1552fa26-c571-4c69-b255-0685fc731218"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("98282142-f9c6-4a4d-8ee7-acbb9c94a744")
                        },
                        new
                        {
                            Id = new Guid("b345fc5b-73e1-4a94-a5c5-a0aba00a3215"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("98282142-f9c6-4a4d-8ee7-acbb9c94a744")
                        },
                        new
                        {
                            Id = new Guid("d69d75dd-e4f3-45e1-b8c4-0d76fbb9652a"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("98282142-f9c6-4a4d-8ee7-acbb9c94a744")
                        },
                        new
                        {
                            Id = new Guid("1dde8a93-eaff-43e9-9ce6-a58e9ee38fd8"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("98282142-f9c6-4a4d-8ee7-acbb9c94a744")
                        },
                        new
                        {
                            Id = new Guid("f2324e77-ea26-483b-ac66-abb59ff8216b"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("65a3b0cb-6c69-4c65-b895-d0083f3fc869")
                        },
                        new
                        {
                            Id = new Guid("0a84937c-d017-4bff-b57a-8e072576df8d"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("65a3b0cb-6c69-4c65-b895-d0083f3fc869")
                        },
                        new
                        {
                            Id = new Guid("69b59a43-e66e-41ad-8f84-127870f58b07"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("65a3b0cb-6c69-4c65-b895-d0083f3fc869")
                        },
                        new
                        {
                            Id = new Guid("7c6a90a3-9a6a-4736-b685-6e514bc63b95"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("65a3b0cb-6c69-4c65-b895-d0083f3fc869")
                        },
                        new
                        {
                            Id = new Guid("c04158b3-a966-434b-b03f-398ad17ca159"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("0b804058-92af-490c-820f-60401b6d44ff")
                        },
                        new
                        {
                            Id = new Guid("38a9aa7b-6d90-454d-a398-bbb1101b6f83"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("0b804058-92af-490c-820f-60401b6d44ff")
                        },
                        new
                        {
                            Id = new Guid("d6fc4a6e-2bd9-4bac-9eea-376a7761df84"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("0b804058-92af-490c-820f-60401b6d44ff")
                        },
                        new
                        {
                            Id = new Guid("554f595c-b24c-49ff-bc87-f0b05157c3e4"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("0b804058-92af-490c-820f-60401b6d44ff")
                        },
                        new
                        {
                            Id = new Guid("54e688c1-0ad9-464e-bd3d-d58162ba9172"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("844ed8cc-b48d-434c-887f-acae05dc9924")
                        },
                        new
                        {
                            Id = new Guid("449cfe94-5476-4f2f-87dc-29e0b5c13122"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("844ed8cc-b48d-434c-887f-acae05dc9924")
                        },
                        new
                        {
                            Id = new Guid("c0c30c87-9e1b-4f5f-934b-bb6033fd149a"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("844ed8cc-b48d-434c-887f-acae05dc9924")
                        },
                        new
                        {
                            Id = new Guid("ede0800e-ecd2-4fd7-ba5f-e00f92559992"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("844ed8cc-b48d-434c-887f-acae05dc9924")
                        },
                        new
                        {
                            Id = new Guid("0f623d94-056e-4c0d-9186-3da46c200f16"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("4301af88-cacf-4bf9-9e8c-0b9a5a1baef3")
                        },
                        new
                        {
                            Id = new Guid("d7f63cbb-f175-40fe-8fba-4b56651e52fa"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("4301af88-cacf-4bf9-9e8c-0b9a5a1baef3")
                        },
                        new
                        {
                            Id = new Guid("df3ece7b-8613-44f5-ac3b-2d4f0f6f6d2f"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("4301af88-cacf-4bf9-9e8c-0b9a5a1baef3")
                        },
                        new
                        {
                            Id = new Guid("a36818c4-6845-44a7-b07b-77a3c29ca9cd"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("4301af88-cacf-4bf9-9e8c-0b9a5a1baef3")
                        },
                        new
                        {
                            Id = new Guid("dfea7e5b-777c-409a-835b-c9390d3c5d0b"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("fe8da9d8-0bf0-468e-8596-2e96e0dd97ce")
                        },
                        new
                        {
                            Id = new Guid("2fce610e-f9cd-4cd1-8d80-af2bffd796bb"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("fe8da9d8-0bf0-468e-8596-2e96e0dd97ce")
                        },
                        new
                        {
                            Id = new Guid("80deade1-a49b-4fde-8283-63acd6dbfee7"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("fe8da9d8-0bf0-468e-8596-2e96e0dd97ce")
                        },
                        new
                        {
                            Id = new Guid("bceec596-3ade-4f8d-89fb-367769506305"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("fe8da9d8-0bf0-468e-8596-2e96e0dd97ce")
                        },
                        new
                        {
                            Id = new Guid("9e974197-d840-43b0-b207-6121bf5e057a"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("be03d07d-4582-4bbc-9ab2-35ba6d5b3f79")
                        },
                        new
                        {
                            Id = new Guid("2e7cbe30-69e3-443d-a744-512e44ee8da5"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("be03d07d-4582-4bbc-9ab2-35ba6d5b3f79")
                        },
                        new
                        {
                            Id = new Guid("7af0ac90-5a57-4ca8-a0e9-3267fe67ef67"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("be03d07d-4582-4bbc-9ab2-35ba6d5b3f79")
                        },
                        new
                        {
                            Id = new Guid("5804bbbc-613e-49cc-a441-30666dad0c56"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("be03d07d-4582-4bbc-9ab2-35ba6d5b3f79")
                        },
                        new
                        {
                            Id = new Guid("5226bfbe-d6e9-4f93-b59a-fac0348bac26"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("f2eeb56d-f800-46ee-8461-b13ea5f489a5")
                        },
                        new
                        {
                            Id = new Guid("121ce5b2-18df-4c0a-82a4-0a9709cba120"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("f2eeb56d-f800-46ee-8461-b13ea5f489a5")
                        },
                        new
                        {
                            Id = new Guid("dfcf0971-5833-4ed5-9a7f-210b6e8d0d6d"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("f2eeb56d-f800-46ee-8461-b13ea5f489a5")
                        },
                        new
                        {
                            Id = new Guid("164b409d-0371-4a54-9ded-848df7378d76"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("f2eeb56d-f800-46ee-8461-b13ea5f489a5")
                        },
                        new
                        {
                            Id = new Guid("f17a824f-d333-4b4b-a655-7a1e3e8363c5"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("662d775e-c5f3-468a-a819-28e9a75a0d18")
                        },
                        new
                        {
                            Id = new Guid("fc3a4ed0-4de7-433a-8da3-b2940cbf46af"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("662d775e-c5f3-468a-a819-28e9a75a0d18")
                        },
                        new
                        {
                            Id = new Guid("59b7eced-45b1-442b-bbdc-b403e03b9bd9"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("662d775e-c5f3-468a-a819-28e9a75a0d18")
                        },
                        new
                        {
                            Id = new Guid("501640c9-8640-4f7d-855d-80412449775b"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("662d775e-c5f3-468a-a819-28e9a75a0d18")
                        },
                        new
                        {
                            Id = new Guid("886b6fe2-4dc3-4ebb-8324-4db996a0fd5c"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("b38edf74-351d-4e28-a2a0-9f5d85fd0301")
                        },
                        new
                        {
                            Id = new Guid("0d54c4ae-6a2f-4e8b-9ed6-298d2bf314f9"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("b38edf74-351d-4e28-a2a0-9f5d85fd0301")
                        },
                        new
                        {
                            Id = new Guid("31d427b0-3b2d-4390-a5ef-3980d7544fc1"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("b38edf74-351d-4e28-a2a0-9f5d85fd0301")
                        },
                        new
                        {
                            Id = new Guid("7693f2d4-af27-4fa3-9f38-bb282190c1aa"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("b38edf74-351d-4e28-a2a0-9f5d85fd0301")
                        },
                        new
                        {
                            Id = new Guid("86562fb7-b4fd-4c01-bc21-b54d17fa185b"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("714d9e89-b3d5-419f-9201-ebf58e3ca1b9")
                        },
                        new
                        {
                            Id = new Guid("ef9d4666-f9c4-4096-b133-6e87c51d5172"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("714d9e89-b3d5-419f-9201-ebf58e3ca1b9")
                        },
                        new
                        {
                            Id = new Guid("b1f56e5f-5cea-4b55-8904-b64a8e548fec"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("714d9e89-b3d5-419f-9201-ebf58e3ca1b9")
                        },
                        new
                        {
                            Id = new Guid("7fc5aad1-6dda-4f15-be10-42d711fa11d7"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("714d9e89-b3d5-419f-9201-ebf58e3ca1b9")
                        },
                        new
                        {
                            Id = new Guid("61c4a5d8-ae6e-4e22-a0f7-3bc5ea48031c"),
                            Choice = "الاختيار 1",
                            QuestionId = new Guid("2427299d-bcf5-483f-bd55-930908251b48")
                        },
                        new
                        {
                            Id = new Guid("feaf6b0b-a66c-4899-987e-9a260ebcfb08"),
                            Choice = "الاختيار 2",
                            QuestionId = new Guid("2427299d-bcf5-483f-bd55-930908251b48")
                        },
                        new
                        {
                            Id = new Guid("de8aa496-0d9f-47d0-95c2-fd68dc3265ef"),
                            Choice = "الاختيار 3",
                            QuestionId = new Guid("2427299d-bcf5-483f-bd55-930908251b48")
                        },
                        new
                        {
                            Id = new Guid("2b0495b3-3ecf-4af2-8caf-34b7075155b5"),
                            Choice = "الاختيار 4",
                            QuestionId = new Guid("2427299d-bcf5-483f-bd55-930908251b48")
                        });
                });

            modelBuilder.Entity("models.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdc6ff15-70f6-4771-9ebb-67f945306de3"),
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = new Guid("13860db6-9768-4bc2-8e6f-4e3bbc2f6fda"),
                            Name = "Assistant",
                            NormalizedName = "ASSISTANT"
                        },
                        new
                        {
                            Id = new Guid("65a67234-cdab-433d-bcf1-60a0e88907cd"),
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("models.Model.StudentCourse", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("e1aa04ca-694f-4efc-b90c-3d9cf54fbe96"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            EnrollmentDate = new DateTime(2025, 3, 13, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6336),
                            Id = new Guid("5dda4ef0-055b-4d92-a1b3-2eb416b979d8")
                        },
                        new
                        {
                            StudentId = new Guid("e1aa04ca-694f-4efc-b90c-3d9cf54fbe96"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            EnrollmentDate = new DateTime(2025, 3, 27, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6360),
                            Id = new Guid("a67e5175-9b9a-419e-beb6-15825aa2ac82")
                        },
                        new
                        {
                            StudentId = new Guid("d43ae3f5-659a-458a-949f-f56fac95c00c"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            EnrollmentDate = new DateTime(2025, 3, 22, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6377),
                            Id = new Guid("ba5e1c7b-3b77-45de-8846-e999cf7223a4")
                        },
                        new
                        {
                            StudentId = new Guid("d43ae3f5-659a-458a-949f-f56fac95c00c"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            EnrollmentDate = new DateTime(2025, 3, 28, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6381),
                            Id = new Guid("f7ea9064-ce46-483e-ad96-149ddf0af758")
                        },
                        new
                        {
                            StudentId = new Guid("8482fac0-379d-41fb-b46c-d57b6790a31c"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            EnrollmentDate = new DateTime(2025, 3, 19, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6386),
                            Id = new Guid("b03ed3d8-96ee-4698-a09e-2fc262533a8c")
                        },
                        new
                        {
                            StudentId = new Guid("8482fac0-379d-41fb-b46c-d57b6790a31c"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            EnrollmentDate = new DateTime(2025, 3, 19, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6390),
                            Id = new Guid("afaa2624-c730-4e4b-b266-516bd52feb31")
                        },
                        new
                        {
                            StudentId = new Guid("41906696-d1a6-4bf6-8f35-8fe9e3ddb7d2"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            EnrollmentDate = new DateTime(2025, 4, 7, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6394),
                            Id = new Guid("e06c678b-fb43-4831-9f83-9285220ea0cb")
                        },
                        new
                        {
                            StudentId = new Guid("41906696-d1a6-4bf6-8f35-8fe9e3ddb7d2"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            EnrollmentDate = new DateTime(2025, 3, 17, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6398),
                            Id = new Guid("3544e873-8d6e-4e4b-814f-cc12ac77a4c6")
                        },
                        new
                        {
                            StudentId = new Guid("441baea8-ba1a-40c6-bc9b-27ddcff7dd10"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            EnrollmentDate = new DateTime(2025, 4, 2, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6408),
                            Id = new Guid("17c8fdf5-3d87-491d-bd77-5c8f3feaea16")
                        },
                        new
                        {
                            StudentId = new Guid("441baea8-ba1a-40c6-bc9b-27ddcff7dd10"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            EnrollmentDate = new DateTime(2025, 3, 16, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6412),
                            Id = new Guid("460d9a9a-8041-4ef2-9adb-96dd5c70c6ca")
                        },
                        new
                        {
                            StudentId = new Guid("c89a74d7-ade4-4d53-9ad8-d3d7a3d778f1"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            EnrollmentDate = new DateTime(2025, 3, 15, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6418),
                            Id = new Guid("72cc5203-4804-41fa-b209-f55d07aa2c7e")
                        },
                        new
                        {
                            StudentId = new Guid("c89a74d7-ade4-4d53-9ad8-d3d7a3d778f1"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            EnrollmentDate = new DateTime(2025, 3, 23, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6422),
                            Id = new Guid("030dcc02-3f68-4605-80e8-e9562538b006")
                        },
                        new
                        {
                            StudentId = new Guid("7edbe094-17b1-4741-9082-dc0a28902272"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            EnrollmentDate = new DateTime(2025, 3, 27, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6426),
                            Id = new Guid("d21f1426-1c42-4583-8f5b-bf641218832c")
                        },
                        new
                        {
                            StudentId = new Guid("7edbe094-17b1-4741-9082-dc0a28902272"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            EnrollmentDate = new DateTime(2025, 3, 17, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6430),
                            Id = new Guid("d3cc06cd-b586-4503-b3f4-d68e98fe0cfd")
                        },
                        new
                        {
                            StudentId = new Guid("6ea2a8fa-36b1-4c34-8eaf-832a19f44e19"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            EnrollmentDate = new DateTime(2025, 3, 29, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6434),
                            Id = new Guid("d0cfcc9a-ce67-4879-844c-968c585c9242")
                        },
                        new
                        {
                            StudentId = new Guid("6ea2a8fa-36b1-4c34-8eaf-832a19f44e19"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            EnrollmentDate = new DateTime(2025, 3, 21, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6438),
                            Id = new Guid("e3bcb949-e7d7-4fcd-93a8-3c97854a05be")
                        },
                        new
                        {
                            StudentId = new Guid("c8c1ae89-0be2-44df-a2b6-d5dd4807de3c"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            EnrollmentDate = new DateTime(2025, 3, 26, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6443),
                            Id = new Guid("225d140d-a013-462e-981a-943362a76e5d")
                        },
                        new
                        {
                            StudentId = new Guid("c8c1ae89-0be2-44df-a2b6-d5dd4807de3c"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            EnrollmentDate = new DateTime(2025, 4, 3, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6447),
                            Id = new Guid("2e416991-d25c-4445-9ea7-d4dfd89b4cff")
                        },
                        new
                        {
                            StudentId = new Guid("6c010b6a-0d42-490a-b3af-3d1b19aec676"),
                            CourseId = new Guid("f8572fca-5dd5-4995-bf08-a76eb7c0d040"),
                            EnrollmentDate = new DateTime(2025, 3, 13, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6453),
                            Id = new Guid("35e9678a-5dab-459f-93dd-d99371799646")
                        },
                        new
                        {
                            StudentId = new Guid("6c010b6a-0d42-490a-b3af-3d1b19aec676"),
                            CourseId = new Guid("423fa4ed-cf9f-4ea9-92bd-b023475247c7"),
                            EnrollmentDate = new DateTime(2025, 3, 14, 11, 52, 28, 341, DateTimeKind.Local).AddTicks(6456),
                            Id = new Guid("372cda51-8820-41ca-9ccf-7542eed2450d")
                        });
                });

            modelBuilder.Entity("models.Model.Assistant", b =>
                {
                    b.HasBaseType("models.Model.AppUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Assistant");
                });

            modelBuilder.Entity("models.Model.Student", b =>
                {
                    b.HasBaseType("models.Model.AppUser");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParentPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("year")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1aa04ca-694f-4efc-b90c-3d9cf54fbe96"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "81224bfe-3393-4ad6-bf1e-efd94640e3ad",
                            Email = "student1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT1",
                            PasswordHash = "AQAAAAIAAYagAAAAEAh1T/rnRIy64tEKNxfyDI1rbkYLtZLhvn2Dz7GkCInTik+SgvG3hqQmfwkoU/ToEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "student1",
                            FName = "محمد",
                            ParentPhone = "01002225329",
                            SName = "محمود",
                            TName = "أحمد",
                            year = 2024
                        },
                        new
                        {
                            Id = new Guid("d43ae3f5-659a-458a-949f-f56fac95c00c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9baac3e6-35bf-4b66-addb-05a2ece47954",
                            Email = "student2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAECEH0f/2Rb9OOxHPVgLaa62a41k0cc5Dn9Oe5uOyFzbfK9NGsar/RdeNUJVUw/Fu3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "student2",
                            FName = "أحمد",
                            ParentPhone = "01004704844",
                            SName = "السيد",
                            TName = "محمد",
                            year = 2024
                        },
                        new
                        {
                            Id = new Guid("8482fac0-379d-41fb-b46c-d57b6790a31c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16ff4ce7-b881-4bf2-88ea-3118d43ff3c3",
                            Email = "student3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT3@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT3",
                            PasswordHash = "AQAAAAIAAYagAAAAEHE72rt0jX9coUo5h2t6es0se6sHpVN2OG6RN6LP1w/nswmBB2IqbFQzIesGcPBUGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "student3",
                            FName = "عمر",
                            ParentPhone = "01002475497",
                            SName = "العربي",
                            TName = "علي",
                            year = 2024
                        },
                        new
                        {
                            Id = new Guid("41906696-d1a6-4bf6-8f35-8fe9e3ddb7d2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6111a6c9-afb5-4013-8836-9cc44d58d480",
                            Email = "student4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT4@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT4",
                            PasswordHash = "AQAAAAIAAYagAAAAEMITv9aisLCcBtEv7jJdDs330H4UI8smfIul/mghbf/apzB8adE+baRcjkIfH2hM2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "student4",
                            FName = "علي",
                            ParentPhone = "01001679915",
                            SName = "حسين",
                            TName = "حسن",
                            year = 2024
                        },
                        new
                        {
                            Id = new Guid("441baea8-ba1a-40c6-bc9b-27ddcff7dd10"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "894b27dc-dab3-40b7-8942-00a7a588f65d",
                            Email = "student5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT5@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT5",
                            PasswordHash = "AQAAAAIAAYagAAAAEOvro/2RsOFk6ERie3qfsafIs7oonR04JiRSC5aD4rdGej/q3lr6/5GhNEPglUOwvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "student5",
                            FName = "يوسف",
                            ParentPhone = "01007044546",
                            SName = "مصطفى",
                            TName = "عبدالعزيز",
                            year = 2024
                        },
                        new
                        {
                            Id = new Guid("c89a74d7-ade4-4d53-9ad8-d3d7a3d778f1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4493350a-03e3-4c53-bb93-a498a376c54e",
                            Email = "student6@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT6@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT6",
                            PasswordHash = "AQAAAAIAAYagAAAAEP4pKdH46os3xu6Yvio60tmsvE6+553QyOBg4G8mj2nbLPeIlaN/5cOgnZxu+1yYuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "student6",
                            FName = "عبدالله",
                            ParentPhone = "01003813684",
                            SName = "عثمان",
                            TName = "السيد",
                            year = 2024
                        },
                        new
                        {
                            Id = new Guid("7edbe094-17b1-4741-9082-dc0a28902272"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cb0d718-7f7e-4688-bdbc-c06267dc61df",
                            Email = "student7@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT7@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT7",
                            PasswordHash = "AQAAAAIAAYagAAAAEBKPMexkM1k7E359RH8zRnajVq8/1xVLyn4FcGJ7No9fqzsfuvYVxjPlYEEx6Eb2vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "student7",
                            FName = "إبراهيم",
                            ParentPhone = "01008296763",
                            SName = "الشافعي",
                            TName = "إبراهيم",
                            year = 2024
                        },
                        new
                        {
                            Id = new Guid("6ea2a8fa-36b1-4c34-8eaf-832a19f44e19"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a02771a-e3ec-41e7-9467-ed0fbb1412ec",
                            Email = "student8@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT8@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT8",
                            PasswordHash = "AQAAAAIAAYagAAAAEKHHc4dtWEB9WJAAyEkuhK2X1Dktm33ffxl1zcub2zln9iH/GrgLLxslf7yx1tRqfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "student8",
                            FName = "حسن",
                            ParentPhone = "01004379256",
                            SName = "إسماعيل",
                            TName = "العربي",
                            year = 2024
                        },
                        new
                        {
                            Id = new Guid("c8c1ae89-0be2-44df-a2b6-d5dd4807de3c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5a536a6-6e37-4b3a-98cb-e5b1924baedd",
                            Email = "student9@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT9@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT9",
                            PasswordHash = "AQAAAAIAAYagAAAAEKuY6aS2DuRV1R1uCDyh6DWF00OvV0GKgwV3Nh7fV+u3108KPNhWDYHT+4XXz73XyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "student9",
                            FName = "خالد",
                            ParentPhone = "01008789522",
                            SName = "عبدالرحمن",
                            TName = "مصطفى",
                            year = 2024
                        },
                        new
                        {
                            Id = new Guid("6c010b6a-0d42-490a-b3af-3d1b19aec676"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b1bbef6-7d0e-4993-8bd6-789359e1bc4f",
                            Email = "student10@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT10@EXAMPLE.COM",
                            NormalizedUserName = "STUDENT10",
                            PasswordHash = "AQAAAAIAAYagAAAAEFS75yaBAtpBV+YJfiMDp2QO1YMyBqS73hxJ1G59cuJRN0cq8Pti0wR1okSJtf6ZfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "student10",
                            FName = "زياد",
                            ParentPhone = "01002568613",
                            SName = "المصري",
                            TName = "محمود",
                            year = 2024
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("models.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("models.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("models.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("models.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("models.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("models.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("models.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("models.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("models.Model.Answer", b =>
                {
                    b.HasOne("models.Model.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("models.Model.Student", "Student")
                        .WithMany("Answers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("models.Model.Coupon", b =>
                {
                    b.HasOne("models.Model.Course", "Course")
                        .WithMany("Coupons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("models.Model.Exam", b =>
                {
                    b.HasOne("models.Model.Course", "Course")
                        .WithOne("Exam")
                        .HasForeignKey("models.Model.Exam", "CourseId");

                    b.HasOne("models.Model.Student", null)
                        .WithMany("Exams")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("models.Model.ExamSession", b =>
                {
                    b.HasOne("models.Model.Exam", "Exam")
                        .WithMany("ExamSessions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("models.Model.Student", "Student")
                        .WithMany("ExamSessions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("models.Model.Lesson", b =>
                {
                    b.HasOne("models.Model.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("models.Model.Payment", b =>
                {
                    b.HasOne("models.Model.Course", "Course")
                        .WithMany("Payments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("models.Model.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("models.Model.Question", b =>
                {
                    b.HasOne("models.Model.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("models.Model.QuestionChoices", b =>
                {
                    b.HasOne("models.Model.Question", "Question")
                        .WithMany("QuestionChoices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("models.Model.StudentCourse", b =>
                {
                    b.HasOne("models.Model.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("models.Model.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("models.Model.Course", b =>
                {
                    b.Navigation("Coupons");

                    b.Navigation("Exam")
                        .IsRequired();

                    b.Navigation("Lessons");

                    b.Navigation("Payments");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("models.Model.Exam", b =>
                {
                    b.Navigation("ExamSessions");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("models.Model.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionChoices");
                });

            modelBuilder.Entity("models.Model.Student", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ExamSessions");

                    b.Navigation("Exams");

                    b.Navigation("Payments");

                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
